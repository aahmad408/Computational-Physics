# -*- coding: utf-8 -*-
"""Rocket Trajectory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1paskh4dgz_58vlTuG3oOqc5Pdvwjq0Yu

Howitzer (cf. exercises 2.6-9 in the textbook)

Construct a FORTRAN program to calculate the 2-D trajectory of a rocket-shaped
cannon shell (mass 43kg, diameter 155mm, average drag coefficient C = 0.25, launch speed v0 = 830m/s) including a drag force on sea level (ρair = 1.29kg/m3).

(a) Calculate the trajectories for various launch angles Θ0 in steps of 1◦(starting
from, say, 10◦), and determine the launch angle, Θmax0 , that gives the maximum
range. Plot only every fifth trajectory (i.e., in increments of 5◦) but include
Θmax0 . As a reference, also include the zero-drag trajectory for Θmax0 computed
from your code and benchmarked against the analytical result.

(b) Compute and plot the speed as a function of time for the Θmax0 trajectory.

(c) Compute and plot the maximal height, range, flight time, and speed at impact,
for each trajectory as a function of Θ0 over a range of 20◦-60◦.

(d) Implement the effects of an adiabatic height variation of B2, with ρ(y) =
ρ0(1 −ay/T0)α(where a = 6.5 ·10−3K/m, T0 = 280K, ρ0 = ρair and α = 2.5).
For Θ0 = 40◦and 50◦, compute and plot the trajectories; include the ones
without height correction to B2, and comment on the differences.

(e) Continuing with part d, by how much does the range for the 2 trajectories
change if the ground temperature changes from 280K to 260K?
"""

import math
import matplotlib.pyplot as plt
import numpy as np

v0 = 830     # initial velocity in m/s

m = 43     # mass in kg

p = 1.29    # air density in kg/m

A = np.pi*0.25*0.155*0.155     # surface area (pi)radius^2

C = 0.25    # avg drag coefficient

def B(C, p, A):
   return 0.5*C*p*A   # force drag coefficient

a0 = math.radians(10)  # initial angle, 10deg

time = [0]  # list of times

X = [0]   # list of x coordinates with drag

Y = [0]   # list of y coordinates with drag

g = -9.81   #gravity m/s^2

dt = .01

def adia(a, y, T, p, alpha):
  return p*(1-a*y/T)**alpha

def drag_graphs(a):

  vx = v0*math.cos(a)   # initial velocity x component

  vy = v0*math.sin(a)   # initial velocity y component

  X = [0]

  Y = [0]

  v = ((vy)**2 + (vx)**2)**0.5

  while Y[len(Y)-1] >= 0:

    vx = vx - (B(C, p, A)/m)*v*vx*dt

    vy = vy - (B(C, p, A)/m)*v*vy*dt + g*dt

    v = ((vy)**2 + (vx)**2)**0.5

    X.append(X[len(X)-1] + vx*dt)

    Y.append(Y[len(Y)-1] + vy*dt)

  plt.plot(X, Y)
  plt.xlabel('x-position (m)')
  plt.ylabel('y-position (m)')
  plt.title('Trajectories with Drag at Various Angles')

for a in range(10, 95, 5):
  drag_graphs(math.radians(a))

plt.show()

def maximum(a):

  max_heights = []

  ranges = []

  vx = v0*math.cos(a)   # initial velocity x component

  vy = v0*math.sin(a)   # initial velocity y component

  X = [0]

  Y = [0]

  v = ((vy)**2 + (vx)**2)**0.5

  while Y[len(Y)-1] >= 0:

    vx = vx - (B(C, p, A)/m)*v*vx*dt

    vy = vy - (B(C, p, A)/m)*v*vy*dt + g*dt

    v = ((vy)**2 + (vx)**2)**0.5

    X.append(X[len(X)-1] + vx*dt)

    Y.append(Y[len(Y)-1] + vy*dt)

  max_heights.append(np.max(Y))

  ranges.append(X[len(X)-1])

  return X[len(X)-1]

set = {}

for a in range(10, 90):
    set[a] = maximum(math.radians(a))

print(max(set, key = set.get))

"""Maximum Angle: 35 deg"""

def no_drag(a):

  vx = v0*math.cos(a)   # initial velocity x component

  vy = v0*math.sin(a)   # initial velocity y component

  X = [0]

  Y = [0]

  v = ((vy)**2 + (vx)**2)**0.5

  while Y[len(Y)-1] >= 0:

    vx = vx

    vy = vy + g*dt

    v = ((vy)**2 + (vx)**2)**0.5

    X.append(X[len(X)-1] + vx*dt)

    Y.append(Y[len(Y)-1] + vy*dt)

  plt.plot(X, Y)
  plt.xlabel('x-position (m)')
  plt.ylabel('y-position (m)')
  plt.title('Trajectory without Drag at Maximum Angle')

no_drag(math.radians(35))

plt.show()

def velocity(a):

  time = [0]

  dt = .01

  X = [0]

  Y = [0]

  vx = v0*math.cos(a)   # initial velocity x component

  vy = v0*math.sin(a)   # initial velocity y component

  v = ((vy)**2 + (vx)**2)**0.5

  speed = [v]

  while Y[len(Y)-1] >= 0:

    vx = vx - (B(C, p, A)/m)*v*vx*dt

    vy = vy - (B(C, p, A)/m)*v*vy*dt + g*dt

    v = ((vy)**2 + (vx)**2)**0.5

    X.append(X[len(X)-1] + vx*dt)

    Y.append(Y[len(Y)-1] + vy*dt)

    speed.append(v)

    time.append(time[len(time)-1]+dt)

  plt.plot(time, speed)
  plt.xlabel('Time (s)')
  plt.ylabel('Speed (m/s)')
  plt.title('Speed of Cannon Ball at Max Launch Angle')

velocity(math.radians(35))

plt.show()

heights = []

angles = []

ranges = []

flight_times = []

impact_speeds = []

def maximums(a):

  vx = v0*math.cos(a)   # initial velocity x component

  vy = v0*math.sin(a)   # initial velocity y component

  X = [0]

  Y = [0]

  v = ((vy)**2 + (vx)**2)**0.5


  while Y[len(Y)-1] >= 0:

    vx = vx - (B(C, p, A)/m)*v*vx*dt

    vy = vy - (B(C, p, A)/m)*v*vy*dt + g*dt

    v = ((vy)**2 + (vx)**2)**0.5

    X.append(X[len(X)-1] + vx*dt)

    Y.append(Y[len(Y)-1] + vy*dt)

    time.append(time[len(time)-1]+dt)


  heights.append(max(Y))

  ranges.append(X[len(X)-1])

  flight_times.append(time[len(time)-1])

  impact_speeds.append(v)


  return X[len(X)-1]


for a in range(20, 61):
    angles.append(a)
    maximums(math.radians(a))

plt.plot(angles, heights)
plt.xlabel('Angles (degrees)')
plt.ylabel('Max Heights')
plt.title('Max Heights with Drag at Various Angles')

plt.plot(angles, flight_times)
plt.xlabel('Angles (degrees)')
plt.ylabel('Time')
plt.title('Flight Times with Drag at Various Angles')

plt.plot(angles, ranges)
plt.xlabel('Angles (degrees)')
plt.ylabel('Ranges')
plt.title('Ranges with Drag at Various Angles')

plt.plot(angles, impact_speeds)
plt.xlabel('Angles (degrees)')
plt.ylabel('Impact Speed')
plt.title('Impact Speeds with Drag at Various Angles')

def adiabatic(a, T):

  dt = .01

  X = [0]

  Y = [0]

  vx = v0*math.cos(a)   # initial velocity x component

  vy = v0*math.sin(a)   # initial velocity y component

  v = ((vy)**2 + (vx)**2)**0.5

  while (Y[len(Y)-1] >= 0):

    p = adia(0.0065, Y[len(Y)-1], T, 1.29, 2.5)

    vx = vx - (B(C, p, A)/m)*v*vx*dt

    vy = vy - (B(C, p, A)/m)*v*vy*dt + g*dt

    v = ((vy)**2 + (vx)**2)**0.5

    X.append(X[len(X)-1] + vx*dt)

    Y.append(Y[len(Y)-1] + vy*dt)


  plt.plot(X, Y)

adiabatic(math.radians(40), 280)
plt.title('Trajectories with Adiabatic effects at a 40 degree angle')

adiabatic(math.radians(50), 280)
plt.title('Trajectories with Adiabatic effects at a 50 degree angle')

"""Increased Height with the 50 degree launch

Negligible change based on 20 degree kelvin
"""


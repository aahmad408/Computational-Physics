# -*- coding: utf-8 -*-
"""Condensed Matter HW7

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11w7TqMFGzK5zktSuoW7a6k_Zl2p8_fJL
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.linalg import eigh

N = 50  # Number of lattice sites
W = 2.0
t = 1.0  # Hopping matrix element
num_eigenstates = 5
num_realizations = 100  # Number of realizations to average IPR over
system_sizes = [10, 100, 1000]  # Different system sizes for IPR scaling

ipr_values = []

for system_size in system_sizes:
    IPR_sum = 0.0

    for i in range(num_realizations):

        un = np.random.normal(0, W/2, N)

        H = np.zeros((N, N), dtype=complex)
        for n in range(N):
            H[n, n] = un[n]
            H[(n+1)%N, n] = t
            H[n, (n+1)%N] = t

        # Diagonalize the hamiltonian
        eigenvalues, eigenvectors = eigh(H)

        # Calculate IPR for each eigenstate
        for i in range(N):
            psi = eigenvectors[:, i]
            IPR = np.sum(np.abs(psi)**4)
            IPR_sum += IPR

    avg_IPR = IPR_sum/(num_realizations*N)
    ipr_values.append(avg_IPR)

    if system_size == system_sizes[0]:
        plt.figure()
        for i in range(num_eigenstates):
            plt.plot(np.abs(eigenvectors[:, i])**2, label=f'Eigenvector_{i+1}')
        plt.title(f'Eigenstates for N = {N}')
        plt.xlabel('Site Index')
        plt.ylabel('Probability Density')
        plt.legend()

plt.figure()
plt.loglog(system_sizes, ipr_values, marker='o')
plt.title('IPR Scaling')
plt.xlabel('System Size (N)')
plt.ylabel('IPR')
plt.show()

matrix = np.zeros((50,50))

listmatrix = matrix.tolist()
for i in range(50):
    matrix[i][i] = 'u'

def matrix(dim):
    return [[0]*dim for i in range(dim)]

dim = 50
empty_matrix = matrix(dim)

for i in range(50):
    empty_matrix[i][i] = 'u'

def matrix(dim):
    return [[0 for i in range(dim)] for j in range(dim)]

dim = 50
H = matrix(dim)

for i in range(dim):
    H[i][i] = 'u'

    if i < 49:
        H[i+1][i] = 't'

    if i > 0:
        H[i-1][i] = 't'


for row in H:
    print(row)

np.linalg.eig(H)

def matrix(dim):
    return [[0 for i in range(dim)]]

# Example usage:
dim=4
matrix(dim)
print(matrix)

H = [['u', 't', 0, 0],
    ['t', 'u', 't', 0],
    [0, 't', 'u', 't'],
    [0, 0, 't', 'u']]